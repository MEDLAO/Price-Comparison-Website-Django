# Redirect all HTTP traffic to HTTPS
server {
    listen 80;  # Listen on port 80 for HTTP (non-secure) traffic
    server_name fromsifr.com www.fromsifr.com;

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri;  # Redirect to the same URL with HTTPS
    }
}

# HTTPS server block for secure traffic
server {
    listen 443 ssl;  # Listen on port 443 for HTTPS traffic
    server_name fromsifr.com www.fromsifr.com;  # Replace with your domain names

    # SSL certificate and key files (from Let's Encrypt or another certificate provider)
    ssl_certificate /etc/letsencrypt/live/fromsifr.com/fullchain.pem;  # Path to the SSL certificate
    ssl_certificate_key /etc/letsencrypt/live/fromsifr.com/privkey.pem;  # Path to the SSL private key

    # Serve static files with caching
    location /static/ {
        alias /app/staticfiles/;  # Path to static files inside the Docker container
        add_header Cache-Control "public";  # Make sure files are publicly cacheable
        expires 30d;  # Cache static files in the browser for 30 days
    }

#     # Serve media files with caching
#     location /media/ {
#         alias /app/media/;  # Path to media files inside the Docker container
#         add_header Cache-Control "public";  # Make sure media files are publicly cacheable
#         expires 30d;  # Cache media files in the browser for 30 days
#     }

    # Reverse proxy all other requests to the Django app running via Gunicorn
    location / {
        proxy_pass http://web:8000;  # Forward requests to Gunicorn running in the web container on port 8000
        proxy_set_header Host $host;  # Pass the original host header
        proxy_set_header X-Real-IP $remote_addr;  # Pass the real IP address of the client
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Pass the original client IP in case of proxies
        proxy_set_header X-Forwarded-Proto $scheme;  # Pass the original request protocol (HTTP or HTTPS)
    }
}
