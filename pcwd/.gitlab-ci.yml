stages:
  - quality
  - test
  - build
  - deploy

# 1. Quality Stage: Run Flake8 linter
quality:
  stage: quality
  image: python:3.10
  script:
    - cd pcwd
    - pip install flake8
    - flake8 .
    - echo "$GOOGLE_API_CLIENT_ID"
  allow_failure: true  # Allow this stage to fail without breaking the pipeline

# 2. Test Stage: Run Pytest for unit tests
test:
  stage: test
  image: python:3.10
  script:
    - cd pcwd
    - pip install -r requirements.txt
    - pytest

# 3. Build Stage: Build Docker Image and Push to Docker Hub
build:
  stage: build
  image: docker:latest
  variables:
    SECURE_FILES_DOWNLOAD_PATH: './pcwd/'
  services:
    - docker:dind  # Enable Docker commands within the runner
  script:
    - apk add --no-cache curl bash
    - curl -s https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer | bash
    - cd pcwd
    - ls -la
    - echo "$DOCKER_HUB_REGISTRY_PASSWORD" | docker login -u "$DOCKER_HUB_REGISTRY_USER" --password-stdin
    - docker build -t $DOCKER_IMAGE_NAME:latest .
    - docker tag $DOCKER_IMAGE_NAME:latest $DOCKER_HUB_REGISTRY_IMAGE:latest
    - docker push $DOCKER_HUB_REGISTRY_IMAGE:latest

# 4. Deploy Stage: Deploy to AWS EC2 using SSH and Docker Compose
deploy:
  stage: deploy
  image: alpine
  before_script:
    - apk add --no-cache openssh-client
    - echo "$DOCKER_HUB_REGISTRY_PASSWORD" | docker login -u "$DOCKER_HUB_REGISTRY_USER" --password-stdin
  script:
    - cd pcwd
    # Copy docker-compose.yml to the EC2 instance
    - scp -o StrictHostKeyChecking=no -i $EC2_SSH_PRIVATE_KEY docker-compose.yml ec2-user@$EC2_INSTANCE:/home/ec2-user/
    # SSH into the EC2 instance and deploy using Docker Compose
    - ssh -o StrictHostKeyChecking=no -i $EC2_SSH_PRIVATE_KEY ec2-user@$EC2_INSTANCE 'cd /home/ec2-user && docker-compose down && docker-compose up -d'
  only:
    - master
